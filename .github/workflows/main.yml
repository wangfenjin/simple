name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  Windows:
    runs-on: windows-latest 
    strategy:
      fail-fast: false
      matrix:
        include:
        - arch: x86
        - arch: x64

    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    # https://github.com/OpenTTD/OpenTTD/blob/master/.github/workflows/ci-build.yml
    # "restore-cache" which is done by "run-vcpkg" uses Windows tar.
    # A git clone on windows marks a few files as read-only; when Windows tar
    # tries to extract the cache over this folder, it fails, despite the files
    # being identical. This failure shows up as an warning in the logs. We
    # avoid this by simply removing the read-only mark from the git folder.
    # In other words: this is a hack!
    # See: https://github.com/lukka/run-vcpkg/issues/61
    # - name: Remove read-only flag from vcpkg git folder
    #   shell: powershell
    #   run: |
    #     attrib -r "c:\vcpkg\.git\*.*" /s
    # - name: Prepare vcpkg (with cache)
    #   uses: lukka/run-vcpkg@v6
    #   with:
    #     vcpkgDirectory: 'c:/vcpkg'
    #     doNotUpdateVcpkg: true
    #     vcpkgArguments: 'liblzma libpng lzo zlib'
    #     vcpkgTriplet: '${{ matrix.arch }}-windows-static'

    # - name: Install MSVC problem matcher
    #   uses: ammaraskar/msvc-problem-matcher@master

    - name: 'Run CMake with VS16'
      uses: lukka/run-cmake@v3
      with:
        cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
        cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'
        buildDirectory: "${{ github.workspace }}/../../_temp/windows"
        useVcpkgToolchainFile: true
        cmakeBuildType: Debug   
        buildWithCMake: true
        cmakeGenerator: VS16Win64 
        buildWithCMakeArgs: --config Debug  
        
    # - name: 'Run CTest'
    #   run: ctest -C Debug
    #   working-directory: "${{ github.workspace }}/../../_temp/windows"
  
  Linux:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Update apt-get
      run: sudo apt-get update

    - name: Install lcov
      run: sudo apt-get install lcov
    
    - name: Install codecov
      shell: bash
      run: sudo pip install codecov

    - name: 'Run CMake'
      uses: lukka/run-cmake@v3
      with:
        cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
        cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'
        cmakeBuildType: Debug  
        buildDirectory: "${{ github.workspace }}/build"
        buildWithCMake: true
        buildWithCMakeArgs: --config Debug 
        cmakeAppendedArgs: " -DCODE_COVERAGE=ON "
        
    - name: 'Run CTest'
      run: ctest -V -C Debug
      working-directory: "${{ github.workspace }}/build"

    # CODE COVERAGE
    - name: Code coverage - Capture coverage info
      run: lcov --directory . --capture --output-file coverage.info 
    - name: Code coverage - Filter out system, external, and unit test source files
      run: lcov --remove coverage.info --output-file coverage_filter.info '/Library/*' '/usr/*' '*/googletest/*' '*/cmrc/*' '*/entry.cc' '*/simple_highlight.*'
    - name: Code coverage - Output coverage data for debugging
      run: lcov --list coverage_filter.info
    - name: Code coverage - Upload to CodeCov
      run:  bash <(curl -s https://codecov.io/bash) -f coverage_filter.info || echo "Codecov did not collect coverage reports"
  
  MacOS:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v2
    - name: 'Run CMake'
      uses: lukka/run-cmake@v3
      with:
        cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
        cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'
        cmakeBuildType: Debug  
        buildDirectory: "${{ github.workspace }}/../../_temp/macos"
        buildWithCMake: true
        cmakeAppendedArgs: -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}/../../_temp/macos/install"
        buildWithCMakeArgs: --config Debug
        
    - name: 'Run CTest'
      run: ctest -C Debug
      working-directory: "${{ github.workspace }}/../../_temp/macos"
        
